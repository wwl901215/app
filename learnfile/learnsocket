udp-send:
1、创建发送端Socket对象；
    DatagramSocket ds = new DatagramSocket();
2、创建数据，并把数据打包；
    byte[] bys = "hello, udp".getBytes();
    int length = bys.length;
    InetAddress address = InetAddress.getByName("192.168.2.49");
    int port = 10086;
    DatagramPacket dp = new DatagramPacket(bys,length,address,port);
3、调用Socket对象的发送方法发送数据包；
    ds.send(dp);
4、释放资源；
    ds.close();
udp-receive:
1、创建接收Socket对象；
    DatagramSocket ds = new DatagramSocket(10086);
2、创建一个数据包；
    byte[] bys = new byte[1024];
    int length = bys.length;
    DatagramPacket dp = new DatagramPacket(bys,length);
3、调用Socket对象的接受方法接受数据；
    ds.receive(dp);//在接受到数据前一直处于阻塞状态
4、解析数据包，显示在控制台上；
    byte[] bys2 = dp.getData();
    int len = dp.getLength();
    String s = new String(bys2,0,len);//传过来的数据
    InetAddress address = dp.getAddress();//传过来的地址信息
    String ip = address.getHostAddress();//地址信息中的ip地址
5、释放资源；
    ds.close();


tcp-client:tcp协议必须先开服务端
1、创建发送端的Socket对象，如果成功就表明链接成功：
    Socket s = new Socket(InetAddress.getByName("192.168.12.92",8888);
    或者 Socket s = new Socket("192.168.12.92",8888);
2、获取输出流，写数据：
    OutputStream os = s.getOutputStream():
    os.write("hello tcp".getBytes());
3、释放资源：
    s.close();

tcp-server：
1、创建接受端的Socket对象；
    ServerSocket ss = new ServerSocket(8888);
2、监听客户端链接，返回对应的Socket对象；
    Socket s= ss.accept();//客服端链接之前 处于阻塞状态
3、获取数据流，读取数据显示
    InputStream is = s.getInputStream();
    byte[] bys = new byte[1024];
    int len = is.read(bys); //阻塞试方法
    String str = new String(bys,0,len);
4、释放资源
    s.close();
    //ss.close(); 服务器不应该关闭