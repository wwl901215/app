http://blog.csdn.net/github_36617621/article/details/77366987

//创建一个上游 Observable：
        Observable<Integer> observable = Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onNext(3);
                emitter.onComplete();
            }
        });
        //创建一个下游 Observer
        Observer<Integer> observer = new Observer<Integer>() {
            @Override
            public void onSubscribe(Disposable d) {
                Log.d(TAG, "subscribe");
            }

            @Override
            public void onNext(Integer value) {
                Log.d(TAG, "" + value);
            }

            @Override
            public void onError(Throwable e) {
                Log.d(TAG, "error");
            }

            @Override
            public void onComplete() {
                Log.d(TAG, "complete");
            }
        };
        //建立连接
        observable.subscribe(observer);

**********************************************************************
这个系列(一)今天学习了

Observable
Observer
subscribe()
通常我们使用的是带(Observer)参数的subscribe(Observer)方法
不带任何参数的subscribe()方法代表上游随便发,下游收到算我输
带有一个Consumer的subscribe(Consumer)方法代表只接收onNext方法
剩下类推
ObservableEmitter
Disposable
调用dispose()方法上游还会接着走
上游不会因为发送了onComplete而停止
下游中onSubscribe()方法是最先调用的
发射规则:
上游可以发送无限个onNext, 下游也可以接收无限个 onNext.
当上游发送了一个 onComplete 后, 上游 onComplete 之后的事件将会继续发送, 而下游收到onComplete事件之后将不再继续接收事件.
当上游发送了一个 onError 后, 上游 onError 之后的事件将继续发送, 而下游收到 onError 事件之后将不再继续接收事件.
上游可以不发送 onComplete 或 onError .
最为关键的是 onComplete 和 onError 必须唯一并且互斥, 即不能发多个 onComplete , 也不能发多个 onError, 也不能先发一个 onComplete , 然后再发一个 onError , 反之亦然

**********************************************************************

observable.subscribeOn(Schedulers.newThread())
         .subscribeOn(Schedulers.io())
         .observeOn(AndroidSchedulers.mainThread())
         .observeOn(Schedulers.io())
         .subscribe(consumer);

Schedulers.io() 代表io操作的线程, 通常用于网络,读写文件等io密集型的操作
Schedulers.computation() 代表CPU计算密集型的操作, 例如需要大量计算的操作
Schedulers.newThread() 代表一个常规的新线程
AndroidSchedulers.mainThread() 代表Android的主线程
这些内置的Scheduler已经足够满足我们开发的需求, 因此我们应该使用内置的这些选项, 在RxJava内部使用的是线程池来维护这些线程, 所有效率也比较高.



